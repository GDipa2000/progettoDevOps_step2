name: C++ MPI Matrix Multiplication CI 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Checks out the source code of your repository, actions/checkout@v4 is in charge of checking the code into the runner's virtual machine

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mpich libgtest-dev cmake
        # Installs necessary dependencies including MPICH for MPI support, libgtest-dev for Google Test, and cmake for building the project

      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        # Sets up MPI on the runner using mpi4py/setup-mpi action

      - name: Compile and Build Google Test
        run: |
          cd /usr/src/gtest
          sudo cmake CMakeLists.txt -DBUILD_SHARED_LIBS=ON
          sudo make
          sudo cp *.so /usr/lib
        # Compiles Google Test from source as shared libraries and moves the libraries to /usr/lib for system-wide access

      - name: Configure and Build Project
        run: |
          mkdir build
          cd build
          cmake .. -DGTEST_LIBRARY=/usr/lib/libgtest.so -DGTEST_MAIN_LIBRARY=/usr/lib/libgtest_main.so
          make
        # Creates a build directory, configures the project with CMake to link against Google Test libraries, and builds the executable

      - name: Run Tests
        run: |
          cd build
          ./test_multiplication
        # Executes the compiled test binary to run Google Test-based tests

      # Release Process
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
        # Creates a new GitHub release with the specified tag and release name; the release is immediately published (not a draft)

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/main
          asset_name: main
          asset_content_type: application/octet-stream
        # Uploads the specified asset (the executable 'main') to the created release; the content type is set for a binary file