name: Automation_step3

# Definisce gli eventi che attiveranno il workflow
on:
  push:
    branches: [ "main" ]  # Si attiva con ogni push sul branch main
  pull_request:
    branches: [ "main" ]  # Si attiva con ogni pull request sul branch main

# Imposta i permessi necessari per eseguire il workflow
permissions:
  contents: write
  actions: write
  pull-requests: write
  issues: write
  discussions: write
  packages: write
  deployments: write
  repository-projects: write
  security-events: write
  statuses: write

# Definisce i job da eseguire nel workflow
jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Specifica il sistema operativo del runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Estrae il codice dal repository GitHub

      - name: Install dependencies
        run: |
          sudo apt-get update  # Aggiorna l'indice dei pacchetti
          sudo apt-get install -y mpich libgtest-dev cmake  # Installa MPI, Google Test e CMake

      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1  # Configura un ambiente MPI usando l'action mpi4py/setup-mpi

      - name: Compile and Build Google Test
        run: |
          sudo mkdir -p /usr/local/gtest  # Crea la directory per Google Test
          sudo cp -r /usr/src/gtest/* /usr/local/gtest  # Copia i sorgenti di Google Test
          cd /usr/local/gtest
          sudo cmake CMakeLists.txt -DBUILD_SHARED_LIBS=ON  # Configura Google Test con CMake
          sudo make  # Compila Google Test
          sudo cp /usr/local/gtest/lib/*.so /usr/lib  # Copia le librerie compilate nella directory lib

      - name: Configure and Build Project
        run: |
          mkdir build  # Crea una directory per la costruzione del progetto
          cd build
          cmake .. -DGTEST_LIBRARY=/usr/lib/libgtest.so -DGTEST_MAIN_LIBRARY=/usr/lib/libgtest_main.so  # Configura il progetto con CMake
          make  # Compila il progetto

      - name: Run Tests
        run: |
          cd build
          ./test_multiplication  # Esegue il test del progetto

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3  # Carica gli artifacts prodotti
        with:
          name: build-artifacts
          path: build/  # Specifica il percorso della directory da caricare

  release:
    needs: build-and-test  # Dipende dal completamento del job build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Estrae nuovamente il codice dal repository GitHub

      - name: Download build artifacts
        uses: actions/download-artifact@v3  # Scarica gli artifacts prodotti dal job precedente
        with:
          name: build-artifacts
          path: build  # Specifica dove salvare gli artifacts scaricati

      - name: List files in build directory
        run: |
          echo "Listing contents of the build directory..."
          ls -la ./build  # Elenca i file nella directory build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1  # Crea una release su GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Utilizza il token di GitHub per l'autenticazione
        with:
          tag_name: ${{ github.run_id }}  # Imposta il tag usando l'ID della corsa corrente
          release_name: Release ${{ github.run_id }}  # Imposta il nome della release
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1  # Carica gli assets della release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # URL per l'upload degli assets
          asset_path: ./build/test_multiplication  # Percorso del file da caricare
          asset_name: test_multiplication  # Nome del file da caricare
          asset_content_type: application/octet-stream  # Tipo di contenuto del file

  container-automation:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Singularity
        run: |
          export VERSION=3.5.3  # Specifica la versione di Singularity da installare
          wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-${VERSION}.tar.gz &&
          tar -xzf singularity-${VERSION}.tar.gz &&
          cd singularity &&
          ./mconfig &&
          make -C ./builddir &&
          sudo make -C ./builddir install

      - name: Build and push Singularity container
        run: |
          singularity build matrix_multiplication.sif Singularity &&  # Costruisce il container Singularity
          singularity push matrix_multiplication.sif library://your-username/default/matrix_multiplication:latest  # Carica il container su Singularity Library

      - name: SSH and run SLURM job
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SLURM_HOST }}
          username: ${{ secrets.SLURM_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            module load singularity
            singularity pull library://your-username/default/matrix_multiplication:latest
            sbatch job.sh  # Sottomette un job SLURM per eseguire il container
